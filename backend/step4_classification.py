import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import joblib
import os
import time

def step5_1_balanced_model_training():
    """√âTAPE 5.1: Entra√Ænement d'un mod√®le pond√©r√© pour corriger le d√©s√©quilibre."""
    
    print("ü§ñ √âTAPE 5.1: AM√âLIORATION DU MOD√àLE (POND√âRATION)")
    print("="*60)
    
    # --- 1. CHARGEMENT DES DONN√âES ---
    # Garde la m√™me structure de chemin que votre script original
    try:
        base_dir = os.path.dirname(os.path.dirname(__file__))
        data_dir = os.path.join(base_dir, 'data', 'processed')
        models_dir = os.path.join(base_dir, 'data', 'models')
        # S'assurer que le dossier des mod√®les existe
        os.makedirs(models_dir, exist_ok=True)
    except NameError:
        # __file__ n'est pas d√©fini si vous ex√©cutez dans un notebook interactif
        # Remplacez par votre chemin de base si n√©cessaire
        print("Avertissement: __file__ non d√©fini. Utilisation d'un chemin relatif de base.")
        base_dir = '.'
        data_dir = os.path.join(base_dir, 'data', 'processed')
        models_dir = os.path.join(base_dir, 'data', 'models')


    print("üîÑ Chargement des donn√©es d'entra√Ænement et de test...")
    X_train_path = os.path.join(data_dir, 'X_train.pkl')
    X_test_path = os.path.join(data_dir, 'X_test.pkl')
    y_train_path = os.path.join(data_dir, 'y_train.pkl')
    y_test_path = os.path.join(data_dir, 'y_test.pkl')
    
    try:
        X_train = joblib.load(X_train_path)
        X_test = joblib.load(X_test_path)
        y_train = joblib.load(y_train_path)
        y_test = joblib.load(y_test_path)
    except FileNotFoundError as e:
        print(f"\n‚ùå ERREUR: Impossible de charger les fichiers de donn√©es.")
        print(f"   V√©rifiez que les fichiers .pkl existent dans le dossier '{data_dir}'")
        print(f"   D√©tail: {e}")
        return False
    
    print(f"   ‚Ä¢ Entra√Ænement: {X_train.shape[0]} exemples")
    print(f"   ‚Ä¢ Test: {X_test.shape[0]} exemples")
    
    # --- 2. D√âFINITION ET ENTRA√éNEMENT DU MOD√àLE POND√âR√â ---
    print("\nüöÄ Entra√Ænement du mod√®le: Logistic Regression (Pond√©r√©)...")
    
    # LA MODIFICATION CL√â EST ICI: class_weight='balanced'
    # Cela p√©nalise les erreurs sur les classes minoritaires (negative, neutral)
    model = LogisticRegression(max_iter=1000, random_state=42, class_weight='balanced')
    
    # Entra√Ænement
    start_time = time.time()
    model.fit(X_train, y_train)
    training_time = time.time() - start_time
    print(f"   ‚Ä¢ Entra√Ænement termin√© en {training_time:.2f} secondes.")
    
    # Pr√©diction sur l'ensemble de test
    start_time = time.time()
    y_pred = model.predict(X_test)
    prediction_time = time.time() - start_time
    print(f"   ‚Ä¢ Pr√©diction termin√©e en {prediction_time:.2f} secondes.")
    
    # --- 3. √âVALUATION D√âTAILL√âE DU NOUVEAU MOD√àLE ---
    print("\nüèÜ √âVALUATION DU MOD√àLE POND√âR√â")
    print("="*60)
    
    accuracy = accuracy_score(y_test, y_pred)
    print(f"   ‚Ä¢ ‚úÖ Nouvelle Accuracy: {accuracy:.2%}")
    print("      (Note: Une l√©g√®re baisse de l'accuracy est normale et attendue)")

    # Afficher le rapport d√©taill√© du nouveau mod√®le
    print("\nüìä NOUVEAU RAPPORT DE CLASSIFICATION D√âTAILL√â:")
    # Vos labels semblent √™tre 'negative', 'neutral', 'positive'
    class_labels = ['negative', 'neutral', 'positive']
    # Nous utilisons y_test.unique() pour √™tre s√ªr de l'ordre des labels si jamais il change
    # Mais il faut s'assurer que l'ordre correspond bien aux labels attendus.
    # Pour plus de robustesse, on peut mapper les entiers (ex: 0, 1, 2) aux noms.
    # Supposons l'ordre : 0=negative, 1=neutral, 2=positive
    
    print(classification_report(y_test, y_pred, target_names=class_labels, digits=2))

    print("\n--- Analyse des R√©sultats ---")
    print("Comparez ces scores (surtout 'recall' et 'f1-score' pour 'negative' et 'neutral')")
    print("avec ceux de votre mod√®le pr√©c√©dent pour voir l'am√©lioration de l'√©quilibre.")
    
    # --- 4. SAUVEGARDE DU MOD√àLE AM√âLIOR√â ---
    # On donne un nouveau nom au mod√®le pour ne pas √©craser l'ancien
    model_path = os.path.join(models_dir, 'best_sentiment_model_balanced.pkl')
    joblib.dump(model, model_path)
    
    print(f"\nüíæ Mod√®le am√©lior√© 'Logistic Regression (Pond√©r√©)' sauvegard√© dans: {model_path}")
    print(f"   Ce mod√®le est une meilleure base pour l'API.")
    
    print(f"\nüéØ Pr√™t pour l'analyse des r√©sultats et potentiellement l'√©tape SMOTE.")
    
    return True

if __name__ == "__main__":
    # On appelle directement notre nouvelle fonction
    step5_1_balanced_model_training()